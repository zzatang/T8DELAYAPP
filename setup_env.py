#!/usr/bin/env python3
"""
T8 Monitor Environment Setup Script for Raspberry Pi
Interactive script to configure environment variables
"""

import os
import sys
from pathlib import Path

def print_header():
    print("🍓 T8 Delays Monitor - Environment Setup")
    print("=" * 45)
    print()

def get_input(prompt, default=None, required=True):
    """Get user input with optional default value."""
    if default:
        full_prompt = f"{prompt} [{default}]: "
    else:
        full_prompt = f"{prompt}: "
    
    while True:
        value = input(full_prompt).strip()
        
        if value:
            return value
        elif default:
            return default
        elif not required:
            return ""
        else:
            print("This field is required. Please enter a value.")

def yes_no(prompt, default=None):
    """Get yes/no input from user."""
    if default is True:
        prompt += " [Y/n]: "
    elif default is False:
        prompt += " [y/N]: "
    else:
        prompt += " [y/n]: "
    
    while True:
        response = input(prompt).strip().lower()
        
        if response in ['y', 'yes']:
            return True
        elif response in ['n', 'no']:
            return False
        elif response == "" and default is not None:
            return default
        else:
            print("Please enter 'y' or 'n'")

def main():
    print_header()
    
    # Check if .env already exists
    env_file = Path('.env')
    if env_file.exists():
        if not yes_no("⚠️  .env file already exists. Overwrite?", default=False):
            print("Setup cancelled.")
            sys.exit(0)
    
    print("Let's configure your T8 Monitor environment!\n")
    
    # API Backend Selection
    print("🔧 API Backend Configuration")
    print("-" * 30)
    print("1. TwitterAPI.io (Recommended - Pay per use, more reliable)")
    print("2. X API (Free tier with limits)")
    print()
    
    use_twitterapi = yes_no("Use TwitterAPI.io?", default=True)
    
    # API Keys
    if use_twitterapi:
        print("\n📱 TwitterAPI.io Configuration")
        print("-" * 30)
        print("Get your API key from: https://twitterapi.io/")
        twitterapi_key = get_input("TwitterAPI.io API Key")
        x_bearer_token = ""
    else:
        print("\n🐦 X API Configuration")
        print("-" * 30)
        print("Get your bearer token from: https://developer.twitter.com/")
        x_bearer_token = get_input("X API Bearer Token")
        twitterapi_key = ""
    
    # Telegram Configuration
    print("\n📱 Telegram Configuration")
    print("-" * 30)
    print("1. Create a bot: https://t.me/BotFather")
    print("2. Get your chat ID: https://t.me/userinfobot")
    telegram_bot_token = get_input("Telegram Bot Token")
    telegram_chat_id = get_input("Telegram Chat ID")
    
    # Ollama Configuration
    print("\n🤖 Ollama Configuration")
    print("-" * 30)
    ollama_model = get_input("Ollama Model", default="llama3.2:3b")
    ollama_host = get_input("Ollama Host", default="http://localhost:11434")
    
    # Polling Configuration
    print("\n⏱️  Polling Configuration")
    print("-" * 30)
    if use_twitterapi:
        print("Recommended intervals:")
        print("- High frequency: 2-5 minutes (~$2-5/month)")
        print("- Balanced: 15-30 minutes (~$0.50-1/month)")
        print("- Conservative: 60+ minutes (~$0.15/month)")
        default_interval = "15"
    else:
        print("Recommended intervals for X API free tier:")
        print("- Conservative: 60+ minutes (within free limits)")
        print("- Balanced: 30-60 minutes (may exceed limits)")
        default_interval = "60"
    
    polling_interval = get_input("Polling interval (minutes)", default=default_interval)
    
    # Debug Configuration
    print("\n🐛 Debug Configuration")
    print("-" * 30)
    debug_mode = yes_no("Enable debug logging?", default=False)
    
    # Write .env file
    print("\n💾 Writing configuration...")
    
    env_content = f"""# T8 Delays Monitor Configuration
# Generated by setup_env.py

# API Backend Selection
USE_TWITTERAPI_IO={'true' if use_twitterapi else 'false'}

# TwitterAPI.io Configuration (if USE_TWITTERAPI_IO=true)
TWITTERAPI_IO_KEY={twitterapi_key}

# X API Configuration (if USE_TWITTERAPI_IO=false)
X_BEARER_TOKEN={x_bearer_token}

# Telegram Configuration (required)
TELEGRAM_BOT_TOKEN={telegram_bot_token}
TELEGRAM_CHAT_ID={telegram_chat_id}

# Ollama Configuration
OLLAMA_MODEL={ollama_model}
OLLAMA_HOST={ollama_host}

# Polling Configuration
POLLING_INTERVAL_MINUTES={polling_interval}

# Debug Configuration
DEBUG={'true' if debug_mode else 'false'}

# Additional Settings (optional)
# CACHE_DIR=.school_day_cache
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("✅ Configuration saved to .env")
    
    # Show next steps
    print("\n🎯 Next Steps:")
    print("-" * 15)
    print("1. Test your configuration:")
    print("   python monitor_t8_delays_polling.py")
    print()
    print("2. Install as system service:")
    print("   sudo systemctl enable t8-monitor")
    print("   sudo systemctl start t8-monitor")
    print()
    print("3. Monitor the service:")
    print("   sudo systemctl status t8-monitor")
    print("   journalctl -u t8-monitor -f")
    print()
    
    if use_twitterapi:
        estimated_calls = int(285 * 24 * 60 / int(polling_interval))  # Rough estimate
        estimated_cost = estimated_calls * 0.15 / 1000
        print(f"📊 Estimated usage: ~{estimated_calls:,} API calls/month (~${estimated_cost:.2f})")
    else:
        estimated_calls = int(285 * 24 * 60 / int(polling_interval))
        if estimated_calls > 100:
            print(f"⚠️  Estimated usage: ~{estimated_calls:,} API calls/month (exceeds free tier)")
        else:
            print(f"📊 Estimated usage: ~{estimated_calls:,} API calls/month (within free tier)")
    
    print("\n🎉 Setup complete! Your T8 Monitor is ready to run.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nSetup cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Setup failed: {e}")
        sys.exit(1)
